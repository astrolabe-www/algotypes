#include "CORDIC.h"
#include <algorithm>

const int CORDIC::ITERATIONS = 32;

const float CORDIC::PI_ = 3.1415926535897932;

const float CORDIC::ANGLES[] = {
  0.7853981852531433, 0.4636476039886475, 0.2449786663055420, 0.1243549957871437,
  0.0624188110232353, 0.0312398336827755, 0.0156237287446857, 0.0078123412095010,
  0.0039062302093953, 0.0019531225552782, 0.0009765622089617, 0.0004882812208962,
  0.0002441406250000, 0.0001220703125000, 0.0000610351562500, 0.0000305175781250,
  0.0000152587890625, 0.0000076293945313, 0.0000038146972656, 0.0000019073486328,
  0.0000009536743164, 0.0000004768371582, 0.0000002384185791, 0.0000001192092896,
  0.0000000596046448, 0.0000000298023224, 0.0000000149011612, 0.0000000074505806,
  0.0000000037252903, 0.0000000018626451, 0.0000000009313226, 0.0000000004656613
};
const int CORDIC::ANGLES_LENGTH = 32;

const float CORDIC::KS[] = {
  0.7071067811865475, 0.6324555320336758, 0.6135719910778963, 0.6088339125177524,
  0.6076482562561683, 0.6073517701412960, 0.6072776440935261, 0.6072591122988928,
  0.6072544793325625, 0.6072533210898753, 0.6072530315291345, 0.6072529591389450,
  0.6072529410413973, 0.6072529365170103, 0.6072529353859135, 0.6072529351031394,
  0.6072529350324458, 0.6072529350147724, 0.6072529350103540, 0.6072529350092495,
  0.6072529350089734, 0.6072529350089043, 0.6072529350088871, 0.6072529350088828,
  0.6072529350088817, 0.6072529350088814, 0.6072529350088814, 0.6072529350088814,
  0.6072529350088814, 0.6072529350088814, 0.6072529350088812, 0.6072529350088812
};
const int CORDIC::KS_LENGTH = 32;

const float CORDIC::K = CORDIC::KS[std::min(ITERATIONS, KS_LENGTH) - 1];

Vec2 CORDIC::cossin(float beta) {
  Vec2 v = Vec2(1.0, 0.0);

  if ((beta < -CORDIC::PI_ / 2.0) || (beta > CORDIC::PI_ / 2.0)) {
    if (beta < 0) {
      v = cossin(beta + CORDIC::PI_);
    } else {
      v = cossin(beta - CORDIC::PI_);
    }
    v.x *= -1.0;
    v.y *= -1.0;
    return v;
  }

  float potwo = 1.0;
  float angle = CORDIC::ANGLES[0];

  for (int j = 0; j < CORDIC::ITERATIONS; j++) {
    float sigma = (beta < 0) ? -1.0 : 1.0;
    float factor = sigma * potwo;

    float x = v.x - factor * v.y;
    float y = factor * v.x + v.y;
    v.x = x;
    v.y = y;

    beta -= sigma * angle;
    potwo /= 2.0;
    angle = ((j + 2) < CORDIC::ANGLES_LENGTH) ? CORDIC::ANGLES[j + 2] : (angle / 2.0);
  }

  v.x *= CORDIC::K;
  v.y *= CORDIC::K;

  return v;
}
